// MERGE SORT -> YE VALA HI TARIKA USE KARO QUESTION ME 

    // return array vala solution of MERGE SORT
    public int[] mergesort(int[] nums, int si, int ei){
        if(si == ei) return new int[]{nums[si]}; 
        
        int mid = (si + ei)/2;
        
        int[] ar1 = mergesort(nums, si, mid);
        int[] ar2 = mergesort(nums, mid+1, ei);
        
        return mergeTwoSortedArray(ar1, ar2, ei-si+1);
    }
    
    public int[] mergeTwoSortedArray(int[] ar1, int[] ar2, int n){
        int[] ans = new int[n];
        int i = 0, j = 0;
        int idx= 0;
        while(i != ar1.length && j != ar2.length){
            if(ar1[i] <= ar2[j]){
                ans[idx++] = ar1[i++];
            }else {
                ans[idx++] = ar2[j++];
            }
        }
        
        while(i != ar1.length)  ans[idx++] = ar1[i++];
        while(j != ar2.length)  ans[idx++] = ar2[j++];
        
        return ans;
    }




//----------------------------------------------------------------------------------------------


MERGE SORT -> USING SPACE
    // yaha space ka use karo daba ke bass return mat karna void hi rakhna function 
    // because array use karne me time & space jada lagta ha
    // yahi tarika ha karne ka with using space

    void mergeSort(int arr[], int l, int r){
        if(l == r) return;
        if(l > r) return;
        //code here
        int mid = (l+r)/2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid+1, r);
        
        merge(arr, l, mid, r);
    }

    public void merge(int arr[], int l, int mid, int r){
        int[] left = new int[mid-l+1];
        for(int i = l, p = 0; i <= mid; i++) left[p++] = arr[i];
        
        int[] right = new int[r-mid];
        for(int i = mid+1, p = 0; i <= r; i++) right[p++] = arr[i];
        
        // now mergeTwoSortedArray pura vohi ha
        int i = 0, j = 0, idx = 0;
        int[] temp = new int[r-l+1];
        while(i != left.length && j != right.length){
            if(left[i] < right[j]) temp[idx++] = left[i++];
            else temp[idx++] = right[j++];
        }
        
        while(i != left.length) temp[idx++] = left[i++];
        while(j != right.length) temp[idx++] = right[j++];
        
        for(int k = 0, p = l; k < temp.length; k++) arr[p++] = temp[k];
    }
    
